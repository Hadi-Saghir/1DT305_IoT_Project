[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9e751e0b19fc2441",
        "type": "mqtt-broker",
        "name": "home",
        "broker": "48d5fa5ca3de4dcdb4a60ae6194c8c08.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "nodered",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0e365358d146b810",
        "type": "telegram bot",
        "botname": "LNU_Coffee_Bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "b4855121fec6b1a3",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "influxdata",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://127.0.0.1:8086/",
        "rejectUnauthorized": true
    },
    {
        "id": "9a2bd9f455822cd3",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "local",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "2af3fdd0cf10f500",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "brew/start",
        "topic": "brew/start",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9e751e0b19fc2441",
        "x": 600,
        "y": 560,
        "wires": []
    },
    {
        "id": "0d7bd9697bf52552",
        "type": "telegram command",
        "z": "f6f2187d.f17ca8",
        "name": "/start",
        "command": "/start",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "0e365358d146b810",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 110,
        "y": 280,
        "wires": [
            [
                "65ef7740c7ff48d4",
                "d4bbb542173b42fa"
            ],
            [
                "0eb158b5f7c2d338"
            ]
        ]
    },
    {
        "id": "65ef7740c7ff48d4",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "format response",
        "func": "// Extract the chat ID and message ID from the incoming message\nvar chatId = msg.payload.chatId;\nvar messageId = msg.payload.messageId;\n\n// Create a new message payload with the extracted chat ID, message ID, and text\nmsg.payload = {\n    chatId: chatId,\n    sentMessageId: messageId,\n    type: \"message\",\n    content: \"Welcome to the LNU Coffee Bot built by Hadi Saghir! To get started, type /help for some useful commands.\"\n\n};\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 280,
        "wires": [
            [
                "37af0d9011123072",
                "d4bbb542173b42fa"
            ]
        ]
    },
    {
        "id": "d4bbb542173b42fa",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Debug - Start",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 190,
        "y": 200,
        "wires": []
    },
    {
        "id": "37af0d9011123072",
        "type": "telegram sender",
        "z": "f6f2187d.f17ca8",
        "name": "send res",
        "bot": "0e365358d146b810",
        "haserroroutput": false,
        "outputs": 1,
        "x": 560,
        "y": 280,
        "wires": [
            [
                "d4bbb542173b42fa"
            ]
        ]
    },
    {
        "id": "07d44d7647e9dc20",
        "type": "telegram command",
        "z": "f6f2187d.f17ca8",
        "name": "/help",
        "command": "/help",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "0e365358d146b810",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 750,
        "y": 280,
        "wires": [
            [
                "fab189637eb17949",
                "6b3a8d03092504c5"
            ],
            [
                "56f839f38aa40da2"
            ]
        ]
    },
    {
        "id": "fab189637eb17949",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "format response",
        "func": "// Extract the chat ID and message ID from the incoming message\nvar chatId = msg.payload.chatId;\nvar messageId = msg.payload.messageId;\n\n// Create a new message payload with the extracted chat ID, message ID, and text\nmsg.payload = {\n    chatId: chatId,\n    sentMessageId: messageId,\n    type: \"message\",\n    content: \"The following commands are available:\\n\\n\" +\n        \"/brew  - Start brewing coffee instantly.\\n\" +\n        \"/brew schedule <time> - Schedule using time.\\n\" +\n        \"/brew timer <time> - Schedule using a preset timer.\\n\" +\n        \"/warm <time> - Keep warm for a certain amount of time.\\n\" +\n        \"/warm - Keep warm until instructed otherwise.\\n\" +\n        \"/off - turn coffee machine off.\\n\" +\n        \"/report brew - Generate a temperature report for coffee brew.\\n\" +\n        \"/report warm - Generate a temperature report for coffee warm.\"\n};\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 280,
        "wires": [
            [
                "2692bdefe22f1606",
                "6b3a8d03092504c5"
            ]
        ]
    },
    {
        "id": "6b3a8d03092504c5",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Debug - help",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 200,
        "wires": []
    },
    {
        "id": "2692bdefe22f1606",
        "type": "telegram sender",
        "z": "f6f2187d.f17ca8",
        "name": "send res",
        "bot": "0e365358d146b810",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1200,
        "y": 280,
        "wires": [
            [
                "6b3a8d03092504c5"
            ]
        ]
    },
    {
        "id": "0eb158b5f7c2d338",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "unauthorized",
        "func": "// Extract the chat ID and message ID from the incoming message\nvar chatId = msg.payload.chatId;\nvar messageId = msg.payload.messageId;\n\n// Create a new message payload with the extracted chat ID, message ID, and text\nmsg.payload = {\n    chatId: chatId,\n    sentMessageId: messageId,\n    type: \"message\",\n    content: \"Welcome to the LNU Coffee Bot. You currently don't have access to use commands. Please contact the owner to give you permission\"\n\n};\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 340,
        "wires": [
            [
                "37af0d9011123072"
            ]
        ]
    },
    {
        "id": "56f839f38aa40da2",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "unauthorized",
        "func": "// Extract the chat ID and message ID from the incoming message\nvar chatId = msg.payload.chatId;\nvar messageId = msg.payload.messageId;\n\n// Create a new message payload with the extracted chat ID, message ID, and text\nmsg.payload = {\n    chatId: chatId,\n    sentMessageId: messageId,\n    type: \"message\",\n    content: \"You currently don't have access to use commands. Please contact the owner to give you permission\"\n\n};\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 340,
        "wires": [
            [
                "2692bdefe22f1606"
            ]
        ]
    },
    {
        "id": "397a5646f9729b70",
        "type": "telegram command",
        "z": "f6f2187d.f17ca8",
        "name": "/brew",
        "command": "/brew",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "0e365358d146b810",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 110,
        "y": 960,
        "wires": [
            [
                "4fbab07c7bfb791b",
                "12032a5803e9a463",
                "759f972e93bd9863"
            ],
            [
                "05c6859988e8f5ad"
            ]
        ]
    },
    {
        "id": "4fbab07c7bfb791b",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "1:now 2:schedule 3:timer",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "cont",
                "v": "schedule",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": " timer",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 330,
        "y": 680,
        "wires": [
            [
                "2af3fdd0cf10f500"
            ],
            [
                "52c5c52df83abef3"
            ],
            [
                "5bba1ffd35e4b3c1"
            ]
        ]
    },
    {
        "id": "05c6859988e8f5ad",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "unauthorized",
        "func": "// Extract the chat ID and message ID from the incoming message\nvar chatId = msg.payload.chatId;\nvar messageId = msg.payload.messageId;\n\n// Create a new message payload with the extracted chat ID, message ID, and text\nmsg.payload = {\n    chatId: chatId,\n    sentMessageId: messageId,\n    type: \"message\",\n    content: \"Welcome to the LNU Coffee Bot. You currently don't have access to use commands. Please contact the owner to give you permission\"\n\n};\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1180,
        "wires": [
            [
                "e4deb4f4a34d9587"
            ]
        ]
    },
    {
        "id": "80e62e314a10fb40",
        "type": "delay",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 760,
        "y": 680,
        "wires": [
            [
                "d0b79f29e380205c"
            ]
        ]
    },
    {
        "id": "52c5c52df83abef3",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "schedule",
        "func": "// Extract the time from the command\nvar command = msg.payload.content; // Assuming the command is in the content property\nvar time = '';\n\n// Check if the command is '/brew schedule'\nif (command.startsWith('/brew schedule')) {\n    // Extract the time after '/brew schedule'\n    time = command.replace('/brew schedule', '').trim();\n}\n\n// Set the delay in the msg.delay property\nif (time !== '') {\n    // Split the time into hours and minutes\n    var timeParts = time.split(':');\n    var hours = parseInt(timeParts[0]);\n    var minutes = parseInt(timeParts[1]);\n\n    // Calculate the delay in milliseconds\n    var currentDate = new Date();\n    var scheduledDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate(), hours, minutes);\n\n    // Schedule relative to the current time\n    var delay = scheduledDate.getTime() - currentDate.getTime();\n    if (delay < 0) {\n        delay += 24 * 60 * 60 * 1000; // Add 24 hours if the scheduled time has already passed\n    }\n\n    // Set the delay in the msg object\n    msg.delay = delay;\n    msg.commandType = 'schedule'; // Add a property to indicate the command type\n}\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 640,
        "wires": [
            [
                "80e62e314a10fb40"
            ]
        ]
    },
    {
        "id": "5bba1ffd35e4b3c1",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Timer",
        "func": "// Extract the time from the command\nvar command = msg.payload.content; // Assuming the command is in the content property\nvar time = '';\n\n// Check if the command is '/brew timer'\nif (command.startsWith('/brew timer')) {\n    // Extract the time after '/brew timer'\n    time = command.replace('/brew timer', '').trim();\n}\n\n// Set the delay in the msg.delay property\nif (time !== '') {\n    // Split the time into hours and minutes\n    var timeParts = time.split(':');\n    var hours = parseInt(timeParts[0]);\n    var minutes = parseInt(timeParts[1]);\n\n    // Calculate the delay in milliseconds\n    var delay = (hours * 60 * 60 * 1000) + (minutes * 60 * 1000); // Calculate the delay in milliseconds\n\n    // Set the delay in the msg object\n    msg.delay = delay;\n    msg.commandType = 'timer'; // Add a property to indicate the command type\n}\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 720,
        "wires": [
            [
                "80e62e314a10fb40"
            ]
        ]
    },
    {
        "id": "0fa6f25c97215ca7",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "format response",
        "func": "// Extract the chat ID and message ID from the incoming message\nvar telegramMessage = msg.payload[0];\n\nvar chatId = telegramMessage.payload.chatId;\nvar messageId = telegramMessage.payload.messageId;\n\n// Create a new message payload with the extracted chat ID, message ID, and text\nmsg.payload = {\n    chatId: chatId,\n    sentMessageId: messageId,\n    type: \"message\",\n    content: \"Started Brewing!\"\n};\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1020,
        "wires": [
            [
                "10f4b0831e16045d"
            ]
        ]
    },
    {
        "id": "c396910cbcda3488",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "brew/started",
        "topic": "brew/started",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9e751e0b19fc2441",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 290,
        "y": 1060,
        "wires": [
            [
                "98f4dcfafa2269db"
            ]
        ]
    },
    {
        "id": "d21e6602ac75690c",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1100,
        "wires": []
    },
    {
        "id": "12032a5803e9a463",
        "type": "join",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 630,
        "y": 1020,
        "wires": [
            [
                "0fa6f25c97215ca7",
                "d21e6602ac75690c"
            ]
        ]
    },
    {
        "id": "d0b79f29e380205c",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "brew/start",
        "topic": "brew/start",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9e751e0b19fc2441",
        "x": 920,
        "y": 680,
        "wires": []
    },
    {
        "id": "e4deb4f4a34d9587",
        "type": "telegram sender",
        "z": "f6f2187d.f17ca8",
        "name": "send res",
        "bot": "0e365358d146b810",
        "haserroroutput": false,
        "outputs": 1,
        "x": 440,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "30849a0a493a932b",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "brew/done",
        "topic": "brew/done",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9e751e0b19fc2441",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 280,
        "y": 800,
        "wires": [
            [
                "77daa61799663551"
            ]
        ]
    },
    {
        "id": "759f972e93bd9863",
        "type": "join",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 610,
        "y": 840,
        "wires": [
            [
                "d4ef3a7547efc471",
                "28c69d54c944fac7"
            ]
        ]
    },
    {
        "id": "d4ef3a7547efc471",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "format response",
        "func": "// Extract the chat ID and message ID from the incoming message\nvar telegramMessage = msg.payload[0];\n\nvar chatId = telegramMessage.payload.chatId;\nvar messageId = telegramMessage.payload.messageId;\n\n// Create a new message payload with the extracted chat ID, message ID, and text\nmsg.payload = {\n    chatId: chatId,\n    sentMessageId: messageId,\n    type: \"message\",\n    content: \"Coffee is ready! Enjoy!\"\n};\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 840,
        "wires": [
            [
                "10f4b0831e16045d"
            ]
        ]
    },
    {
        "id": "10f4b0831e16045d",
        "type": "telegram sender",
        "z": "f6f2187d.f17ca8",
        "name": "send res",
        "bot": "0e365358d146b810",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1040,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "28c69d54c944fac7",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 780,
        "wires": []
    },
    {
        "id": "402ce021d4ce7ba0",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "wam/start",
        "topic": "wam/start",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9e751e0b19fc2441",
        "x": 320,
        "y": 1360,
        "wires": []
    },
    {
        "id": "1bb6a9dedb160b96",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "format response",
        "func": "// Extract the chat ID and message ID from the incoming message\nvar telegramMessage = msg.payload[0];\n\nvar chatId = telegramMessage.payload.chatId;\nvar messageId = telegramMessage.payload.messageId;\n\n// Create a new message payload with the extracted chat ID, message ID, and text\nmsg.payload = {\n    chatId: chatId,\n    sentMessageId: messageId,\n    type: \"message\",\n    content: \"Started Brewing!\"\n};\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1500,
        "wires": [
            [
                "fe7bb92e4b0b2a0a"
            ]
        ]
    },
    {
        "id": "788bbbdca80f19f9",
        "type": "telegram command",
        "z": "f6f2187d.f17ca8",
        "name": "/warm",
        "command": "/warm",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "0e365358d146b810",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 130,
        "y": 1620,
        "wires": [
            [
                "402ce021d4ce7ba0",
                "eb18603d97998e09",
                "f2ea9b252ce4755c"
            ],
            [
                "9c3f846dc6b6e7f8"
            ]
        ]
    },
    {
        "id": "9c3f846dc6b6e7f8",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "unauthorized",
        "func": "// Extract the chat ID and message ID from the incoming message\nvar chatId = msg.payload.chatId;\nvar messageId = msg.payload.messageId;\n\n// Create a new message payload with the extracted chat ID, message ID, and text\nmsg.payload = {\n    chatId: chatId,\n    sentMessageId: messageId,\n    type: \"message\",\n    content: \"Welcome to the LNU Coffee Bot. You currently don't have access to use commands. Please contact the owner to give you permission\"\n\n};\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1860,
        "wires": [
            [
                "337a19e93661ac49"
            ]
        ]
    },
    {
        "id": "abb94b899358f2c2",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "wam/started",
        "topic": "wam/started",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9e751e0b19fc2441",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 1460,
        "wires": [
            [
                "d307f6b8a37e661d"
            ]
        ]
    },
    {
        "id": "0990c24902884b35",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1440,
        "wires": []
    },
    {
        "id": "f2ea9b252ce4755c",
        "type": "join",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 610,
        "y": 1500,
        "wires": [
            [
                "1bb6a9dedb160b96",
                "0990c24902884b35"
            ]
        ]
    },
    {
        "id": "337a19e93661ac49",
        "type": "telegram sender",
        "z": "f6f2187d.f17ca8",
        "name": "send res",
        "bot": "0e365358d146b810",
        "haserroroutput": false,
        "outputs": 1,
        "x": 480,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "702bb955ea2c3352",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "wam/done",
        "topic": "wam/done",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9e751e0b19fc2441",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 300,
        "y": 1760,
        "wires": [
            [
                "4d1d3976a7e830e1"
            ]
        ]
    },
    {
        "id": "eb18603d97998e09",
        "type": "join",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 610,
        "y": 1700,
        "wires": [
            [
                "21b57e0309724d9f",
                "02f774f71ee7d802"
            ]
        ]
    },
    {
        "id": "21b57e0309724d9f",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "format response",
        "func": "// Extract the chat ID and message ID from the incoming message\nvar telegramMessage = msg.payload[0];\n\nvar chatId = telegramMessage.payload.chatId;\nvar messageId = telegramMessage.payload.messageId;\n\n// Create a new message payload with the extracted chat ID, message ID, and text\nmsg.payload = {\n    chatId: chatId,\n    sentMessageId: messageId,\n    type: \"message\",\n    content: \"Started Brewing!\"\n};\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1700,
        "wires": [
            [
                "fe7bb92e4b0b2a0a"
            ]
        ]
    },
    {
        "id": "fe7bb92e4b0b2a0a",
        "type": "telegram sender",
        "z": "f6f2187d.f17ca8",
        "name": "send res",
        "bot": "0e365358d146b810",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1040,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "02f774f71ee7d802",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1760,
        "wires": []
    },
    {
        "id": "98f4dcfafa2269db",
        "type": "template",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "field": "complete",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "1\n",
        "output": "str",
        "x": 440,
        "y": 1060,
        "wires": [
            [
                "12032a5803e9a463"
            ]
        ]
    },
    {
        "id": "77daa61799663551",
        "type": "template",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "field": "complete",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "1\n",
        "output": "str",
        "x": 420,
        "y": 800,
        "wires": [
            [
                "759f972e93bd9863"
            ]
        ]
    },
    {
        "id": "d307f6b8a37e661d",
        "type": "template",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "field": "complete",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "1\n",
        "output": "str",
        "x": 460,
        "y": 1460,
        "wires": [
            [
                "f2ea9b252ce4755c"
            ]
        ]
    },
    {
        "id": "4d1d3976a7e830e1",
        "type": "template",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "field": "complete",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "1\n",
        "output": "str",
        "x": 440,
        "y": 1760,
        "wires": [
            [
                "eb18603d97998e09"
            ]
        ]
    },
    {
        "id": "085df299c2ed9523",
        "type": "telegram command",
        "z": "f6f2187d.f17ca8",
        "name": "/off",
        "command": "/off",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "0e365358d146b810",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 130,
        "y": 2160,
        "wires": [
            [
                "fbf9b78f26af90d4",
                "4777cf037aa25bb6"
            ],
            [
                "fcc6e41c69af540a"
            ]
        ]
    },
    {
        "id": "b26bce9d94ca5159",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "format response",
        "func": "// Extract the chat ID and message ID from the incoming message\nvar telegramMessage = msg.payload[0];\n\nvar chatId = telegramMessage.payload.chatId;\nvar messageId = telegramMessage.payload.messageId;\n\n// Create a new message payload with the extracted chat ID, message ID, and text\nmsg.payload = {\n    chatId: chatId,\n    sentMessageId: messageId,\n    type: \"message\",\n    content: \"The coffee machine is now off!\"\n};\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 2120,
        "wires": [
            [
                "ed05ded729ec61e0"
            ]
        ]
    },
    {
        "id": "ed05ded729ec61e0",
        "type": "telegram sender",
        "z": "f6f2187d.f17ca8",
        "name": "send res",
        "bot": "0e365358d146b810",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1000,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "fcc6e41c69af540a",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "unauthorized",
        "func": "// Extract the chat ID and message ID from the incoming message\nvar chatId = msg.payload.chatId;\nvar messageId = msg.payload.messageId;\n\n// Create a new message payload with the extracted chat ID, message ID, and text\nmsg.payload = {\n    chatId: chatId,\n    sentMessageId: messageId,\n    type: \"message\",\n    content: \"Welcome to the LNU Coffee Bot. You currently don't have access to use commands. Please contact the owner to give you permission\"\n\n};\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 2240,
        "wires": [
            [
                "ed05ded729ec61e0"
            ]
        ]
    },
    {
        "id": "fbf9b78f26af90d4",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "off/start",
        "topic": "off/start",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9e751e0b19fc2441",
        "x": 320,
        "y": 2000,
        "wires": []
    },
    {
        "id": "b9f41b6ff99be453",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "off/done",
        "topic": "off/done",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9e751e0b19fc2441",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 290,
        "y": 2080,
        "wires": [
            [
                "821a72d476a385b2"
            ]
        ]
    },
    {
        "id": "4777cf037aa25bb6",
        "type": "join",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 570,
        "y": 2120,
        "wires": [
            [
                "b26bce9d94ca5159"
            ]
        ]
    },
    {
        "id": "821a72d476a385b2",
        "type": "template",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "field": "complete",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "1\n",
        "output": "str",
        "x": 420,
        "y": 2080,
        "wires": [
            [
                "4777cf037aa25bb6"
            ]
        ]
    },
    {
        "id": "6df7b8f885f780ad",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "brew/done/sensor/temp",
        "topic": "brew/done/sensor/temp",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9e751e0b19fc2441",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 2760,
        "wires": [
            [
                "7c72a58e91db971d"
            ]
        ]
    },
    {
        "id": "1f5b3a62238f4616",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "warm/sensor/temp",
        "topic": "warm/sensor/temp",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9e751e0b19fc2441",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 2840,
        "wires": [
            [
                "b0d8e0b5e63ea85e"
            ]
        ]
    },
    {
        "id": "e9c9c29706d446f0",
        "type": "influxdb in",
        "z": "f6f2187d.f17ca8",
        "influxdb": "b4855121fec6b1a3",
        "name": "GET",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "hadsag",
        "x": 690,
        "y": 2320,
        "wires": [
            [
                "8ca0ac6cab571596"
            ]
        ]
    },
    {
        "id": "7c72a58e91db971d",
        "type": "influxdb out",
        "z": "f6f2187d.f17ca8",
        "influxdb": "9a2bd9f455822cd3",
        "name": "brew",
        "measurement": "temp",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "hadsag",
        "bucket": "brew",
        "x": 450,
        "y": 2760,
        "wires": []
    },
    {
        "id": "1c7ea6c9566cd388",
        "type": "telegram command",
        "z": "f6f2187d.f17ca8",
        "name": "/report",
        "command": "/report",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "0e365358d146b810",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 130,
        "y": 2480,
        "wires": [
            [
                "0e6e3881c0bbb5fb",
                "d0e940789dbcbe22"
            ],
            [
                "b72e5e896b73a687"
            ]
        ]
    },
    {
        "id": "b72e5e896b73a687",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "unauthorized",
        "func": "// Extract the chat ID and message ID from the incoming message\nvar chatId = msg.payload.chatId;\nvar messageId = msg.payload.messageId;\n\n// Create a new message payload with the extracted chat ID, message ID, and text\nmsg.payload = {\n    chatId: chatId,\n    sentMessageId: messageId,\n    type: \"message\",\n    content: \"Welcome to the LNU Coffee Bot. You currently don't have access to use commands. Please contact the owner to give you permission\"\n\n};\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 2580,
        "wires": [
            [
                "722726bb61796773"
            ]
        ]
    },
    {
        "id": "722726bb61796773",
        "type": "telegram sender",
        "z": "f6f2187d.f17ca8",
        "name": "send res",
        "bot": "0e365358d146b810",
        "haserroroutput": false,
        "outputs": 1,
        "x": 480,
        "y": 2580,
        "wires": [
            []
        ]
    },
    {
        "id": "0e6e3881c0bbb5fb",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "1:brew 2:warm",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "brew",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "warm",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 320,
        "y": 2340,
        "wires": [
            [
                "c48741a9686f51a8"
            ],
            [
                "42be5a942729fa8b"
            ]
        ]
    },
    {
        "id": "a097a93c15dc2b4d",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "format response",
        "func": "// Extract the chat ID and message ID from the incoming message\nvar telegramMessage = msg.payload[0];\n\nvar chatId = telegramMessage.payload.chatId;\nvar messageId = telegramMessage.payload.messageId;\n\n// Get the data array from the payload\nvar data = msg.payload[1].payload;\n\n// Create a variable to store the text format\nvar textFormat = \"\";\n\n// Calculate the average\nvar sum = 0;\nvar count = data.length;\n\nfor (var i = 0; i < count; i++) {\n    var value = data[i]._value;\n    sum += value;\n    textFormat += \"Measurement \" + (i + 1) + \": \" + value + \"\\n\";\n}\n\nvar average = sum / count;\n\n// Append the average to the text format\ntextFormat += \"\\nAverage: \" + average.toFixed(2);\n\n// Create a new message payload with the extracted chat ID, message ID, and text\nmsg.payload = {\n    chatId: chatId,\n    sentMessageId: messageId,\n    type: \"message\",\n    content: textFormat\n};\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 2480,
        "wires": [
            [
                "96509b98c3d40364"
            ]
        ]
    },
    {
        "id": "96509b98c3d40364",
        "type": "telegram sender",
        "z": "f6f2187d.f17ca8",
        "name": "send res",
        "bot": "0e365358d146b810",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1020,
        "y": 2480,
        "wires": [
            []
        ]
    },
    {
        "id": "45a9d52966e572f2",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "warm/sensor/humid",
        "topic": "warm/sensor/humid",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9e751e0b19fc2441",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 2920,
        "wires": [
            [
                "74c3f9a3a2f90bd5"
            ]
        ]
    },
    {
        "id": "b0d8e0b5e63ea85e",
        "type": "influxdb out",
        "z": "f6f2187d.f17ca8",
        "influxdb": "b4855121fec6b1a3",
        "name": "warm/temp",
        "measurement": "temp",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "hadsag",
        "bucket": "warm",
        "x": 470,
        "y": 2840,
        "wires": []
    },
    {
        "id": "74c3f9a3a2f90bd5",
        "type": "influxdb out",
        "z": "f6f2187d.f17ca8",
        "influxdb": "b4855121fec6b1a3",
        "name": "warm/humid",
        "measurement": "humid",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "hadsag",
        "bucket": "warm",
        "x": 470,
        "y": 2920,
        "wires": []
    },
    {
        "id": "c48741a9686f51a8",
        "type": "template",
        "z": "f6f2187d.f17ca8",
        "name": "brew",
        "field": "query",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "from(bucket: \"brew\")\n  |> range(start: 0)\n  |> filter(fn: (r) => r._measurement == \"temp\")\n\n",
        "output": "str",
        "x": 490,
        "y": 2300,
        "wires": [
            [
                "e9c9c29706d446f0"
            ]
        ]
    },
    {
        "id": "d0e940789dbcbe22",
        "type": "join",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 650,
        "y": 2480,
        "wires": [
            [
                "a097a93c15dc2b4d",
                "5bbbe90e7cd71adb"
            ]
        ]
    },
    {
        "id": "8ca0ac6cab571596",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "function 1",
        "func": "// Store the result of the InfluxDB query in a variable\nvar influxResult = msg.payload;\n\n\n// Combine the result with msg.complete\nmsg.payload = influxResult;\nmsg.complete = 1;\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 2320,
        "wires": [
            [
                "d0e940789dbcbe22"
            ]
        ]
    },
    {
        "id": "5bbbe90e7cd71adb",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug - report",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 2600,
        "wires": []
    },
    {
        "id": "42be5a942729fa8b",
        "type": "template",
        "z": "f6f2187d.f17ca8",
        "name": "warm",
        "field": "query",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "from(bucket: \"warm\")\n  |> range(start: 0)\n  |> filter(fn: (r) => r._measurement == \"temp\")\n\n",
        "output": "str",
        "x": 490,
        "y": 2360,
        "wires": [
            [
                "e9c9c29706d446f0"
            ]
        ]
    }
]